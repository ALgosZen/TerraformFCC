resource "aws_vpc" "terraformfcc_vpc" {
  cidr_block           = "10.123.0.0/16"
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Name = "dev"
  }
}

resource "aws_subnet" "fcc_public_subnet" {
  vpc_id                  = aws_vpc.terraformfcc_vpc.id
  cidr_block              = "10.123.1.0/24"
  map_public_ip_on_launch = true
  availability_zone       = "us-west-1b"

  tags = {
    Name = "dev-public"
  }
}

resource "aws_internet_gateway" "fcc_internet_gateway" {
  vpc_id = aws_vpc.terraformfcc_vpc.id

  tags = {
    "Name" = "dev-igw"
  }
}

resource "aws_route_table" "aws_public_rt" {
  vpc_id = aws_vpc.terraformfcc_vpc.id

  tags = {
    "Name" = "dev-rt"
  }

}

resource "aws_route" "default_route" {
  route_table_id         = aws_route_table.aws_public_rt.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.fcc_internet_gateway.id

}

resource "aws_route_table_association" "fcc_public_assoc" {
  subnet_id      = aws_subnet.fcc_public_subnet.id
  route_table_id = aws_route_table.aws_public_rt.id

}

#retrive public ip of your computer to attach to sec. group inbound rule

data "http" "my_public_ip" {
  url = "https://ifconfig.co/json"
  request_headers = {
    Accept = "application/json"
  }
}

locals {
  ifconfig_co_json = jsondecode(data.http.my_public_ip.body)
}

output "my_ip_addr" {
  value = local.ifconfig_co_json.ip
}


resource "aws_security_group" "fcc_sg" {
  name        = "dev_sg"
  description = "dev security group"
  vpc_id      = aws_vpc.terraformfcc_vpc.id

  #incoming traffic
  ingress {
    description = "HTTP port"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["${local.ifconfig_co_json.ip}/32"]


  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["${local.ifconfig_co_json.ip}/32"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

}

variable "generated_key_name" {
  type        = string
  default     = "terraform-key-pair"
  description = "Key-pair generated by Terraform"
}

resource "tls_private_key" "dev_key" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

resource "aws_key_pair" "generated_key" {
  key_name   = var.generated_key_name
  public_key = tls_private_key.dev_key.public_key_openssh

  provisioner "local-exec" { # Generate "terraform-key-pair.pem" in current directory
    command = <<-EOT
      echo '${tls_private_key.dev_key.private_key_pem}' > ./'${var.generated_key_name}'.pem
      chmod 400 ./'${var.generated_key_name}'.pem
    EOT
  }

}

resource "aws_instance" "dev_node" {
  instance_type = "t2.micro"
  ami           = data.aws_ami.amazon-linux-2.id

  key_name               = aws_key_pair.generated_key.id
  vpc_security_group_ids = [aws_security_group.fcc_sg.id]
  subnet_id              = aws_subnet.fcc_public_subnet.id
  user_data              = file("userdata.tpl")

  root_block_device {
    volume_size = 10
  }

  tags = {
    Name = "dev-node"
  }

}

output "ec2_global_ips" {
  value = aws_instance.dev_node.*.public_ip

}





